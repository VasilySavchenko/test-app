{"ast":null,"code":"/**\n * HttpClient is a custom wrapper around fetch api.\n * Exposes get, post and delete methods for JSON.\n */\n\nexport class HttpClient {\n  /**\n   * Performs POST http request with JSON body.\n   * @param path\n   * @param body serialized JSON\n   * @param authToken\n   */\n  async post(path, body, authToken) {\n    return await this.do({\n      method: 'POST',\n      path,\n      body,\n      authToken\n    });\n  }\n\n  /**\n   * Performs PATCH http request with JSON body.\n   * @param path\n   * @param body serialized JSON\n   */\n  async patch(path, body) {\n    return await this.do({\n      method: 'PATCH',\n      path,\n      body\n    });\n  }\n\n  /**\n   * Performs PUT http request with JSON body.\n   * @param path\n   * @param body serialized JSON\n   * @param _auth indicates if authentication is needed\n   */\n  async put(path, body) {\n    return await this.do({\n      method: 'PUT',\n      path,\n      body\n    });\n  }\n\n  /**\n   * Performs GET http request.\n   * @param path\n   */\n  async get({\n    path\n  }) {\n    return await this.do({\n      method: 'GET',\n      path\n    });\n  }\n\n  /**\n   * Performs DELETE http request.\n   * @param path\n   * @param _auth indicates if authentication is needed\n   */\n  /**\n   * Right now needs body here. */\n  async delete(path, body) {\n    return await this.do({\n      method: 'DELETE',\n      path,\n      body\n    });\n  }\n\n  /**\n   * do sends an HTTP request and returns an HTTP response as configured on the client.\n   * @param method holds http method type\n   * @param path\n   * @param body serialized JSON\n   */\n  async do({\n    method,\n    path,\n    body\n  }) {\n    const request = {\n      method: method,\n      body: body\n    };\n    request.headers = {\n      'Content-Type': 'application/json'\n    };\n    return await fetch(path, request);\n  }\n}","map":{"version":3,"names":["HttpClient","post","path","body","authToken","do","method","patch","put","get","delete","request","headers","fetch"],"sources":["/Users/macbookair/Desktop/test-app1/src/private/http/client.ts"],"sourcesContent":["/**\n * HttpClient is a custom wrapper around fetch api.\n * Exposes get, post and delete methods for JSON.\n */\n\ninterface Get {\n    path: string;\n    authToken?: string;\n}\n\ninterface Do {\n    method: string;\n    path: string;\n    body?: string;\n    authToken?: string;\n}\n\nexport class HttpClient {\n    /**\n     * Performs POST http request with JSON body.\n     * @param path\n     * @param body serialized JSON\n     * @param authToken\n     */\n    public async post(\n        path: string,\n        body?: string,\n        authToken?: string\n    ): Promise<Response> {\n        return await this.do({ method: 'POST', path, body, authToken });\n    }\n\n    /**\n     * Performs PATCH http request with JSON body.\n     * @param path\n     * @param body serialized JSON\n     */\n    public async patch(\n        path: string,\n        body?: string,\n    ): Promise<Response> {\n        return await this.do({ method: 'PATCH', path, body });\n    }\n\n    /**\n     * Performs PUT http request with JSON body.\n     * @param path\n     * @param body serialized JSON\n     * @param _auth indicates if authentication is needed\n     */\n    public async put(\n        path: string,\n        body?: string,\n    ): Promise<Response> {\n        return await this.do({ method: 'PUT', path, body });\n    }\n\n    /**\n     * Performs GET http request.\n     * @param path\n     */\n    public async get({ path }: Get): Promise<Response> {\n        return await this.do({ method: 'GET', path });\n    }\n\n    /**\n     * Performs DELETE http request.\n     * @param path\n     * @param _auth indicates if authentication is needed\n     */\n    /**\n     * Right now needs body here. */\n    public async delete(\n        path: string,\n        body?: string,\n    ): Promise<Response> {\n        return await this.do({ method: 'DELETE', path, body });\n    }\n\n    /**\n     * do sends an HTTP request and returns an HTTP response as configured on the client.\n     * @param method holds http method type\n     * @param path\n     * @param body serialized JSON\n     */\n    private async do({ method, path, body }: Do): Promise<Response> {\n        const request: RequestInit = {\n            method: method,\n            body: body,\n        };\n            request.headers = {\n                'Content-Type': 'application/json',\n            };\n\n        return await fetch(path, request);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAcA,OAAO,MAAMA,UAAU,CAAC;EACpB;AACJ;AACA;AACA;AACA;AACA;EACI,MAAaC,IAAIA,CACbC,IAAY,EACZC,IAAa,EACbC,SAAkB,EACD;IACjB,OAAO,MAAM,IAAI,CAACC,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEJ,IAAI;MAAEC,IAAI;MAAEC;IAAU,CAAC,CAAC;EACnE;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAaG,KAAKA,CACdL,IAAY,EACZC,IAAa,EACI;IACjB,OAAO,MAAM,IAAI,CAACE,EAAE,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEJ,IAAI;MAAEC;IAAK,CAAC,CAAC;EACzD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAaK,GAAGA,CACZN,IAAY,EACZC,IAAa,EACI;IACjB,OAAO,MAAM,IAAI,CAACE,EAAE,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEJ,IAAI;MAAEC;IAAK,CAAC,CAAC;EACvD;;EAEA;AACJ;AACA;AACA;EACI,MAAaM,GAAGA,CAAC;IAAEP;EAAU,CAAC,EAAqB;IAC/C,OAAO,MAAM,IAAI,CAACG,EAAE,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEJ;IAAK,CAAC,CAAC;EACjD;;EAEA;AACJ;AACA;AACA;AACA;EACI;AACJ;EACI,MAAaQ,MAAMA,CACfR,IAAY,EACZC,IAAa,EACI;IACjB,OAAO,MAAM,IAAI,CAACE,EAAE,CAAC;MAAEC,MAAM,EAAE,QAAQ;MAAEJ,IAAI;MAAEC;IAAK,CAAC,CAAC;EAC1D;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAcE,EAAEA,CAAC;IAAEC,MAAM;IAAEJ,IAAI;IAAEC;EAAS,CAAC,EAAqB;IAC5D,MAAMQ,OAAoB,GAAG;MACzBL,MAAM,EAAEA,MAAM;MACdH,IAAI,EAAEA;IACV,CAAC;IACGQ,OAAO,CAACC,OAAO,GAAG;MACd,cAAc,EAAE;IACpB,CAAC;IAEL,OAAO,MAAMC,KAAK,CAACX,IAAI,EAAES,OAAO,CAAC;EACrC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}