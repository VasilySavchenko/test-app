{"ast":null,"code":"import { HttpClient } from '../private/http/client';\n\n/**\n * ErrorUnauthorized is a custom error type which indicates that the client request has not been\n * completed because it lacks valid authentication credentials for the requested resource.\n */\nexport class UnauthorizedError extends Error {\n  /** Error message while unauthorized */\n  constructor(message = 'Unauthorized') {\n    super(message);\n  }\n}\n/**\n * BadRequestError is a custom error type which indicates that the server cannot or\n * will not process the request due to something that is perceived to be a client error.\n */\nexport class BadRequestError extends Error {\n  /** Error message while bad request */\n  constructor(message = 'bad request') {\n    super(message);\n  }\n}\n/**\n * NotFoundError is a custom error type which indicates that the server can't find the requested resource.\n */\nexport class NotFoundError extends Error {\n  /** Error message while not found request */\n  constructor(message = 'not found') {\n    super(message);\n  }\n}\n\n/**\n * InternalError is a custom error type which indicates that the server encountered an unexpected condition\n * that prevented it from fulfilling the request.\n */\nexport class InternalError extends Error {\n  /** Error message for internal server error */\n  constructor(message = 'internal server error') {\n    super(message);\n  }\n}\nconst BAD_REQUEST_ERROR = 400;\nconst UNAUTHORISED_ERROR = 401;\nconst NOT_FOUND_ERROR = 404;\nconst INTERNAL_ERROR = 500;\n\n/** APIClient is base client that holds http client and error handler. */\nexport class APIClient {\n  constructor() {\n    this.http = new HttpClient();\n  }\n  /** method to get the authorization token*/\n  get authToken() {\n    return window.localStorage.getItem('AUTH_TOKEN') || '';\n  }\n\n  /**\n   * handles error due to response code.\n   * @param response - response from server.\n   *\n   * @throws {@link NotFoundError}\n   * This exception is thrown if the input is not a valid ISBN number.\n   *\n   * @throws {@link UnauthorizedError}\n   * Thrown if the ISBN number is valid, but no such book exists in the catalog.\n   *\n   * @throws {@link InternalError}\n   * Thrown if the ISBN number is valid, but no such book exists in the catalog.\n   *\n   * @private\n   */\n  /* eslint-disable */\n  async handleError(response) {\n    const error = await response.json();\n    switch (response.status) {\n      case BAD_REQUEST_ERROR:\n        throw new BadRequestError(error.message);\n      case NOT_FOUND_ERROR:\n        throw new NotFoundError(error.message);\n      case UNAUTHORISED_ERROR:\n        throw new UnauthorizedError(error.message);\n      case INTERNAL_ERROR:\n      default:\n        throw new InternalError(error.message);\n    }\n  }\n}","map":{"version":3,"names":["HttpClient","UnauthorizedError","Error","constructor","message","BadRequestError","NotFoundError","InternalError","BAD_REQUEST_ERROR","UNAUTHORISED_ERROR","NOT_FOUND_ERROR","INTERNAL_ERROR","APIClient","http","authToken","window","localStorage","getItem","handleError","response","error","json","status"],"sources":["/Users/macbookair/Desktop/test-app1/src/api/index.tsx"],"sourcesContent":["import { HttpClient } from '../private/http/client';\n\n/**\n * ErrorUnauthorized is a custom error type which indicates that the client request has not been\n * completed because it lacks valid authentication credentials for the requested resource.\n */\nexport class UnauthorizedError extends Error {\n    /** Error message while unauthorized */\n    public constructor(message = 'Unauthorized') {\n        super(message);\n    }\n}\n/**\n * BadRequestError is a custom error type which indicates that the server cannot or\n * will not process the request due to something that is perceived to be a client error.\n */\nexport class BadRequestError extends Error {\n    /** Error message while bad request */\n    public constructor(message = 'bad request') {\n        super(message);\n    }\n}\n/**\n * NotFoundError is a custom error type which indicates that the server can't find the requested resource.\n */\nexport class NotFoundError extends Error {\n    /** Error message while not found request */\n    public constructor(message = 'not found') {\n        super(message);\n    }\n}\n\n/**\n * InternalError is a custom error type which indicates that the server encountered an unexpected condition\n * that prevented it from fulfilling the request.\n */\nexport class InternalError extends Error {\n    /** Error message for internal server error */\n    public constructor(message = 'internal server error') {\n        super(message);\n    }\n}\n\nconst BAD_REQUEST_ERROR = 400;\nconst UNAUTHORISED_ERROR = 401;\nconst NOT_FOUND_ERROR = 404;\nconst INTERNAL_ERROR = 500;\n\n/** APIClient is base client that holds http client and error handler. */\nexport class APIClient {\n    protected readonly http: HttpClient = new HttpClient();\n\n    /** method to get the authorization token*/\n    public get authToken() {\n        return window.localStorage.getItem('AUTH_TOKEN') || '';\n    }\n\n    /**\n     * handles error due to response code.\n     * @param response - response from server.\n     *\n     * @throws {@link NotFoundError}\n     * This exception is thrown if the input is not a valid ISBN number.\n     *\n     * @throws {@link UnauthorizedError}\n     * Thrown if the ISBN number is valid, but no such book exists in the catalog.\n     *\n     * @throws {@link InternalError}\n     * Thrown if the ISBN number is valid, but no such book exists in the catalog.\n     *\n     * @private\n     */\n    /* eslint-disable */\n    protected async handleError(response: Response): Promise<void> {\n        const error = await response.json();\n        switch (response.status) {\n            case BAD_REQUEST_ERROR:\n                throw new BadRequestError(error.message);\n            case NOT_FOUND_ERROR:\n                throw new NotFoundError(error.message);\n            case UNAUTHORISED_ERROR:\n                throw new UnauthorizedError(error.message);\n            case INTERNAL_ERROR:\n            default:\n                throw new InternalError(error.message);\n        }\n    }\n\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,wBAAwB;;AAEnD;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,SAASC,KAAK,CAAC;EACzC;EACOC,WAAWA,CAACC,OAAO,GAAG,cAAc,EAAE;IACzC,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,SAASH,KAAK,CAAC;EACvC;EACOC,WAAWA,CAACC,OAAO,GAAG,aAAa,EAAE;IACxC,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,SAASJ,KAAK,CAAC;EACrC;EACOC,WAAWA,CAACC,OAAO,GAAG,WAAW,EAAE;IACtC,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,SAASL,KAAK,CAAC;EACrC;EACOC,WAAWA,CAACC,OAAO,GAAG,uBAAuB,EAAE;IAClD,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;AAEA,MAAMI,iBAAiB,GAAG,GAAG;AAC7B,MAAMC,kBAAkB,GAAG,GAAG;AAC9B,MAAMC,eAAe,GAAG,GAAG;AAC3B,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA,OAAO,MAAMC,SAAS,CAAC;EAAAT,YAAA;IAAA,KACAU,IAAI,GAAe,IAAIb,UAAU,CAAC,CAAC;EAAA;EAEtD;EACA,IAAWc,SAASA,CAAA,EAAG;IACnB,OAAOC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE;EAC1D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,MAAgBC,WAAWA,CAACC,QAAkB,EAAiB;IAC3D,MAAMC,KAAK,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACnC,QAAQF,QAAQ,CAACG,MAAM;MACnB,KAAKd,iBAAiB;QAClB,MAAM,IAAIH,eAAe,CAACe,KAAK,CAAChB,OAAO,CAAC;MAC5C,KAAKM,eAAe;QAChB,MAAM,IAAIJ,aAAa,CAACc,KAAK,CAAChB,OAAO,CAAC;MAC1C,KAAKK,kBAAkB;QACnB,MAAM,IAAIR,iBAAiB,CAACmB,KAAK,CAAChB,OAAO,CAAC;MAC9C,KAAKO,cAAc;MACnB;QACI,MAAM,IAAIJ,aAAa,CAACa,KAAK,CAAChB,OAAO,CAAC;IAC9C;EACJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}