{"ast":null,"code":"var _s = $RefreshSig$();\nimport { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport usersSlice from \"../../app/store/users/slice\";\nconst appReducer = combineReducers({\n  usersSlice\n});\nexport const store = configureStore({\n  reducer: appReducer\n});\n/** Hook dispatch for redux toolkit */\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n\n/** Hook useSelector hook for redux toolkit */\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","combineReducers","useDispatch","useSelector","usersSlice","appReducer","store","reducer","useAppDispatch","_s","useAppSelector"],"sources":["/Users/macbookair/Desktop/test-app1/src/app/store/index.tsx"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport usersSlice from \"../../app/store/users/slice\"\n\n\nconst appReducer = combineReducers({\n    usersSlice\n});\n\nexport const store = configureStore({\n    reducer: appReducer,\n});\n\nexport type RootState = ReturnType<typeof appReducer>;\nexport type AppDispatch = typeof store.dispatch;\n\n/** Hook dispatch for redux toolkit */\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\n/** Hook useSelector hook for redux toolkit */\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,QAAQ,OAAO;AACvC,SAA+BC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAE5E,OAAOC,UAAU,MAAM,6BAA6B;AAGpD,MAAMC,UAAU,GAAGJ,eAAe,CAAC;EAC/BG;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,KAAK,GAAGN,cAAc,CAAC;EAChCO,OAAO,EAAEF;AACb,CAAC,CAAC;AAKF;AACA,OAAO,MAAMG,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,WAAW,CAAc,CAAC;AAAA;;AAE9D;AAAAO,EAAA,CAFaD,cAAc;EAAA,QAASN,WAAW;AAAA;AAG/C,OAAO,MAAMQ,cAA+C,GAAGP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}